{
  "version": 3,
  "sources": ["src/app/services/tasks.service.ts", "src/app/tasks/tasks.component.ts", "src/app/tasks/tasks.component.html", "src/app/tasks/routes.ts"],
  "sourcesContent": ["import {HttpClient} from '@angular/common/http';\nimport {inject, Injectable} from '@angular/core';\nimport {map, Observable} from 'rxjs';\nimport {environment} from '../../environment';\nimport {QueuedTask, ScheduledTask} from '../models/tasks';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TasksService {\n  private readonly http = inject(HttpClient);\n\n  private tasksUrl = environment.apiUrl + environment.tasks;\n\n  convertTime(seconds: number): string {\n    const timeUnits = [\n      {unit: 'second', value: 60},\n      {unit: 'minute', value: 60},\n      {unit: 'hour', value: 24},\n      {unit: 'day', value: 7},\n    ];\n\n    for (const {unit, value} of timeUnits) {\n      if (seconds < value) {\n        return `${seconds} ${unit}${seconds === 1 ? '' : 's'}`;\n      }\n      seconds = Math.floor(seconds / value);\n    }\n    return `${seconds} ${seconds === 1 ? 'week' : 'weeks'}`;\n  }\n\n  convertDate(date: string): Date | null {\n    return date ? new Date(date + 'Z') : null;\n  }\n\n  // formatDuration(duration: string): string {\n  //   // Check if the duration contains milliseconds\n  //   if (!duration) {\n  //     return '0:00:00';\n  //   }\n  //   if (duration.includes('.')) {\n  //     // Remove the milliseconds\n  //     duration = duration.split('.')[0];\n  //   }\n  //   return duration\n  // }\n\n  formatDuration(duration: number): string {\n    // Convert duration in seconds to HH:MM:SS format\n    if (duration < 1) {\n      return '00:00:00';\n    }\n    let hours = Math.floor(duration / 3600)\n      .toString()\n      .padStart(2, '0');\n    let minutes = Math.floor((duration % 3600) / 60)\n      .toString()\n      .padStart(2, '0');\n    let seconds = (duration % 60).toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  private schedulesUrl = this.tasksUrl + 'schedules';\n  getScheduledTasks(): Observable<ScheduledTask[]> {\n    return this.http.get<{[key: string]: any}>(this.schedulesUrl).pipe(\n      map((all_schedules: {[key: string]: any}) => {\n        return Object.entries(all_schedules).map(([id, schedule]) => ({\n          id,\n          ...schedule,\n          interval: this.convertTime(schedule.interval),\n          last_run_duration: this.formatDuration(schedule.last_run_duration),\n          last_run_start: this.convertDate(schedule.last_run_start),\n          next_run: this.convertDate(schedule.next_run),\n        }));\n      }),\n    );\n  }\n\n  private queueUrl = this.tasksUrl + 'queue';\n  getQueuedTasks(): Observable<QueuedTask[]> {\n    return this.http.get<{[key: string]: any}>(this.queueUrl).pipe(\n      map((all_queues: {[key: string]: any}) => {\n        return Object.entries(all_queues).map(([id, queue]) => ({\n          id,\n          ...queue,\n          duration: this.formatDuration(queue.duration),\n          finished: this.convertDate(queue.finished),\n          started: this.convertDate(queue.started),\n          // end: this.convertDate(queue.end)\n        }));\n      }),\n    );\n  }\n\n  runScheduledTask(id: string): Observable<any> {\n    return this.http.get(this.tasksUrl + 'run/' + id);\n  }\n}\n", "import {NgFor, NgIf} from '@angular/common';\nimport {Component, inject, OnDestroy, OnInit} from '@angular/core';\nimport {TimeagoModule} from 'ngx-timeago';\nimport {Subscription} from 'rxjs';\nimport {QueuedTask, ScheduledTask} from '../models/tasks';\nimport {TasksService} from '../services/tasks.service';\nimport {WebsocketService} from '../services/websocket.service';\nimport {LoadIndicatorComponent} from '../shared/load-indicator';\n\n@Component({\n  selector: 'app-tasks',\n  imports: [NgIf, NgFor, LoadIndicatorComponent, TimeagoModule],\n  providers: [],\n  templateUrl: './tasks.component.html',\n  styleUrl: './tasks.component.scss',\n})\nexport class TasksComponent implements OnInit, OnDestroy {\n  private readonly tasksService = inject(TasksService);\n  private readonly websocketService = inject(WebsocketService);\n\n  scheduledTasks: ScheduledTask[] = [];\n  queuedTasks: QueuedTask[] = [];\n  isLoading1 = true;\n  isLoading2 = true;\n\n  private timeoutRef: any;\n  private webSocketSubscription?: Subscription;\n\n  ngOnInit(): void {\n    // On first fetch, get next event start time and set interval to fetch at that time\n    // If a task is running, fetch every 10 seconds\n    this.refreshTaskData();\n\n    const handleWebSocketEvent = () => {\n      this.refreshTaskData();\n    };\n\n    const handleCloseEvent = () => {\n      // Unsubscribe from the refresh interval\n      clearTimeout(this.timeoutRef);\n      // Unsubscribe from the WebSocket events\n      this.webSocketSubscription?.unsubscribe();\n    };\n\n    // Subscribe to the WebSocket events with the simplified handler\n    this.webSocketSubscription = this.websocketService.connect().subscribe({\n      next: handleWebSocketEvent,\n      error: handleCloseEvent,\n      complete: handleCloseEvent,\n    });\n  }\n\n  getSecondsToNextScheduledEvent(sTasks: ScheduledTask[], qTasks: QueuedTask[]): number {\n    // Get the time to the next event\n    let secondsToNextEvent = 30; // Default to 30 seconds\n\n    // If an QueuedTask is running, set the time to 10 seconds\n    for (let qTask of qTasks) {\n      if (qTask.status === 'Running') {\n        // console.log('Task is running, wil refresh data in 10 seconds');\n        return 10;\n      }\n    }\n\n    // If no QueuedTask is running, get the time to the next event\n    for (let sTask of sTasks) {\n      let now = new Date().getTime();\n      let nextRun = sTask.next_run.getTime();\n      let secondsTillNextRun = Math.floor((nextRun - now) / 1000) + 2;\n      secondsTillNextRun = Math.max(secondsTillNextRun, 3); // Ensure that the time is at least 5 second\n      if (secondsTillNextRun === 3) {\n        // console.log('Task next run soon, will refresh data in 3 seconds');\n        return 3;\n      }\n      secondsToNextEvent = Math.min(secondsToNextEvent, secondsTillNextRun); // Get the minimum time to the next event\n    }\n    // console.log('No task is running, will refresh data in', secondsToNextEvent, 'seconds');\n    return secondsToNextEvent;\n  }\n\n  refreshTaskData() {\n    // Clear any existing timeout\n    clearTimeout(this.timeoutRef);\n\n    // Refresh the data\n    // console.log('Refreshing task data');\n    this.tasksService.getScheduledTasks().subscribe((tasks: ScheduledTask[]) => {\n      this.scheduledTasks = tasks;\n      this.isLoading1 = false;\n    });\n    this.tasksService.getQueuedTasks().subscribe((tasks: QueuedTask[]) => {\n      this.queuedTasks = tasks;\n      this.isLoading2 = false;\n    });\n\n    // Get the time to the next event\n    let secondsToNextEvent = this.getSecondsToNextScheduledEvent(this.scheduledTasks, this.queuedTasks);\n\n    // Refresh the data at the time of the next event\n    // console.log('Refreshing data in', secondsToNextEvent, 'seconds');\n    this.timeoutRef = setTimeout(() => {\n      this.refreshTaskData();\n    }, secondsToNextEvent * 1000);\n  }\n\n  ngOnDestroy() {\n    // Unsubscribe from the refresh interval\n    clearTimeout(this.timeoutRef);\n    // Unsubscribe from the WebSocket events\n    this.webSocketSubscription?.unsubscribe();\n  }\n\n  runTask(task_id: string) {\n    // console.log('Running task with id:', task_id);\n    this.tasksService.runScheduledTask(task_id).subscribe((res: string) => {\n      console.log(res);\n    });\n  }\n}\n", "<div class=\"tasks-container\">\n  <div class=\"text-heading\">Scheduled</div>\n  <hr />\n  <app-load-indicator *ngIf=\"isLoading1; else schedulesLoaded\" class=\"center\" />\n  <ng-template #schedulesLoaded>\n    <div class=\"table-container\">\n      <table class=\"tasks-table\">\n        <tr class=\"table-row header\">\n          <th class=\"name\">Name</th>\n          <th>Interval</th>\n          <th>Last Run</th>\n          <th>Last Run Status</th>\n          <th>Last Run Duration</th>\n          <th>Next Run</th>\n          <th></th>\n        </tr>\n        <!-- <p>{{ scheduledTasks }}</p> -->\n        <tr *ngFor=\"let task of scheduledTasks\" class=\"table-row\">\n          <!-- <td class=\"name\">{{ task.id }}: {{ task.name }}</td> -->\n          <td class=\"name\">{{ task.name }}</td>\n          <td>{{ task.interval }}</td>\n          <td>{{ task.last_run_start ? (task.last_run_start | timeago) : 'Not run yet' }}</td>\n          <td>{{ task.last_run_status }}</td>\n          <td>{{ task.last_run_duration }}</td>\n          <td>{{ task.next_run ? (task.next_run | timeago) : 'Not scheduled' }}</td>\n          <td\n            *ngIf=\"task.last_run_status.toLowerCase() != 'running'\"\n            title=\"Run task now\"\n            (click)=\"task.last_run_status = 'Running'; runTask(task.task_id)\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\">\n              <path\n                d=\"M382-306.67 653.33-480 382-653.33v346.66ZM480-80q-82.33 0-155.33-31.5-73-31.5-127.34-85.83Q143-251.67 111.5-324.67T80-480q0-83 31.5-156t85.83-127q54.34-54 127.34-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 82.33-31.5 155.33-31.5 73-85.5 127.34Q709-143 636-111.5T480-80Z\"\n              />\n            </svg>\n          </td>\n          <td *ngIf=\"task.last_run_status.toLowerCase() == 'running'\" title=\"Task is running\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -960 960 960\" class=\"loading\">\n              <path\n                d=\"M343-107q-120-42-194.5-146.5T74-490q0-29 4-57.5T91-604l-57 33-37-62 185-107 106 184-63 36-54-92q-13 30-18.5 60.5T147-490q0 113 65.5 200T381-171l-38 64Zm291-516v-73h107q-47-60-115.5-93.5T480-823q-66 0-123.5 24T255-734l-38-65q54-45 121-71t142-26q85 0 160.5 33T774-769v-67h73v213H634ZM598-1 413-107l107-184 62 37-54 94q123-17 204.5-110.5T814-489q0-19-2.5-37.5T805-563h74q4 18 6 36.5t2 36.5q0 142-87 251.5T578-96l56 33-36 62Z\"\n              />\n            </svg>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </ng-template>\n  <div class=\"text-heading\">Queue</div>\n  <hr />\n  <app-load-indicator *ngIf=\"isLoading1; else queueLoaded\" class=\"center\" />\n  <ng-template #queueLoaded>\n    <div class=\"table-container last-table\">\n      <table class=\"tasks-table\">\n        <tr class=\"table-row header\">\n          <th class=\"name\">Name</th>\n          <th>Status</th>\n          <th>Started</th>\n          <th>Finished</th>\n          <th>Duration</th>\n        </tr>\n        <!-- <p>{{ queuedTasks }}</p> -->\n        <tr *ngFor=\"let task of queuedTasks\" class=\"table-row\">\n          <!-- <td class=\"name\">{{ task.id }}: {{ task.name }}</td> -->\n          <td class=\"name\">{{ task.name }}</td>\n          <td>{{ task.status }}</td>\n          <td>{{ task.started ? (task.started | timeago) : 'Pending' }}</td>\n          <td>{{ task.finished ? (task.finished | timeago) : '-' }}</td>\n          <td>{{ task.duration }}</td>\n        </tr>\n      </table>\n    </div>\n  </ng-template>\n</div>\n", "import {Route} from '@angular/router';\nimport {TasksComponent} from './tasks.component';\n\nexport default [{path: '', loadComponent: () => TasksComponent}] as Route[];\n"],
  "mappings": "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",
  "names": []
}
