{
  "version": 3,
  "sources": ["src/app/services/profile.service.ts"],
  "sourcesContent": ["import {httpResource} from '@angular/common/http';\nimport {computed, inject, Injectable, signal} from '@angular/core';\nimport {TrailerProfileRead, TrailerProfilesService} from 'generated-sources/openapi';\nimport {environment} from 'src/environment';\nimport {WebsocketService} from './websocket.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  private profilesUrl = environment.apiUrl + environment.trailerprofiles;\n  private _service = inject(TrailerProfilesService);\n  private websocketService = inject(WebsocketService);\n\n  readonly allProfiles = httpResource<TrailerProfileRead[]>(this.profilesUrl, {defaultValue: []});\n\n  /* Signal to track the selected profile ID */\n  readonly selectedProfileId = signal(0);\n\n  /* Signal to fetch the selected profile if it doesn't exist in allProfiles */\n  private readonly fetchSelectedProfileResource = httpResource<TrailerProfileRead>(() => {\n    if (this.selectedProfileId() <= 0) {\n      return undefined;\n    }\n    const profileExists = this.allProfiles.value().findIndex((profile) => profile.id === this.selectedProfileId());\n    if (profileExists !== -1) return undefined;\n    return this.profilesUrl + this.selectedProfileId();\n  });\n\n  /* Computed property to get the selected profile */\n  /* This will first check if the profile exists in allProfiles, and if not, it will fetch it */\n  readonly selectedProfile = computed(() => {\n    const selectedId = this.selectedProfileId();\n    if (selectedId <= 0) {\n      return undefined; // No/Invalid profile selected\n    }\n\n    // Check if the profile exists in allProfiles\n    const profile = this.allProfiles.value().find((profile) => profile.id === selectedId);\n    if (profile) {\n      return profile; // Return the profile from the local list\n    }\n\n    // If not found, return the value from the fetchSelectedProfileResource\n    return this.fetchSelectedProfileResource.value();\n  });\n\n  updateSetting(key: keyof TrailerProfileRead, value: any) {\n    const selectedId = this.selectedProfileId();\n    if (selectedId <= 0) {\n      throw new Error('No profile selected');\n    }\n\n    this._service\n      .updateTrailerProfileSettingApiV1TrailerprofilesTrailerprofileIdSettingPost({\n        trailerprofile_id: selectedId,\n        body: {\n          key: key,\n          value: value,\n        },\n      })\n      .subscribe({\n        next: (updatedProfile) => {\n          // Update the local allProfiles signal with the updated profile\n          this.allProfiles.update((profiles) => {\n            const index = profiles.findIndex((profile) => profile.id === updatedProfile.id);\n            if (index !== -1) {\n              profiles[index] = updatedProfile;\n              return [...profiles];\n            }\n            return [...profiles, updatedProfile];\n          });\n          const _key = key.charAt(0).toUpperCase() + key.replaceAll('_', ' ').slice(1);\n          this.websocketService.showToast(`${_key} set to '${value}' successfully!`, 'success');\n        },\n        error: (error) => {\n          // Log the server's error message\n          let errorMessage = 'An unknown error occurred!';\n          if (error.error instanceof ErrorEvent) {\n            // client-side error\n            errorMessage = `Error: ${error.error.message}`;\n          } else {\n            // server-side error\n            errorMessage = `Error: ${error.status} ${error.error.detail}`;\n          }\n          console.error('Failed to update profile setting:', errorMessage);\n          this.websocketService.showToast(errorMessage, 'error');\n        },\n      });\n  }\n\n  deleteProfile(id: number) {\n    if (id <= 0) {\n      throw new Error('Invalid profile ID');\n    }\n    this._service.deleteTrailerProfileApiV1TrailerprofilesTrailerprofileIdDelete({trailerprofile_id: id}).subscribe({\n      next: () => {\n        // Reset the selected profile ID and reload profiles\n        this.selectedProfileId.set(0);\n        this.allProfiles.reload();\n        this.websocketService.showToast('Profile deleted successfully!', 'success');\n      },\n      error: (error) => {\n        // Log the server's error message\n        let errorMessage = 'An unknown error occurred!';\n        if (error.error instanceof ErrorEvent) {\n          // client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // server-side error\n          errorMessage = `Error: ${error.status} ${error.error.detail}`;\n        }\n        console.error('Failed to delete profile:', errorMessage);\n        this.websocketService.showToast(errorMessage, 'error');\n      },\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["profile"]
}
