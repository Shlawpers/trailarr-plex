{"version":3,"sources":["node_modules/rxjs/dist/esm/internal/observable/dom/WebSocketSubject.js","node_modules/rxjs/dist/esm/internal/observable/dom/webSocket.js","src/app/services/websocket.service.ts"],"sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: e => JSON.parse(e.data),\n  serializer: value => JSON.stringify(value)\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n  constructor(urlConfigOrSource, destination) {\n    super();\n    this._socket = null;\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource;\n    } else {\n      const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      this._output = new Subject();\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (const key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n  lift(operator) {\n    const sock = new WebSocketSubject(this._config, this.destination);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n  _resetState() {\n    this._socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject();\n  }\n  multiplex(subMsg, unsubMsg, messageFilter) {\n    const self = this;\n    return new Observable(observer => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n      const subscription = self.subscribe({\n        next: x => {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        },\n        error: err => observer.error(err),\n        complete: () => observer.complete()\n      });\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n  _connectSocket() {\n    const {\n      WebSocketCtor,\n      protocol,\n      url,\n      binaryType\n    } = this._config;\n    const observer = this._output;\n    let socket = null;\n    try {\n      socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n      this._socket = socket;\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n    const subscription = new Subscription(() => {\n      this._socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n    socket.onopen = evt => {\n      const {\n        _socket\n      } = this;\n      if (!_socket) {\n        socket.close();\n        this._resetState();\n        return;\n      }\n      const {\n        openObserver\n      } = this._config;\n      if (openObserver) {\n        openObserver.next(evt);\n      }\n      const queue = this.destination;\n      this.destination = Subscriber.create(x => {\n        if (socket.readyState === 1) {\n          try {\n            const {\n              serializer\n            } = this._config;\n            socket.send(serializer(x));\n          } catch (e) {\n            this.destination.error(e);\n          }\n        }\n      }, err => {\n        const {\n          closingObserver\n        } = this._config;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        if (err && err.code) {\n          socket.close(err.code, err.reason);\n        } else {\n          observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n        }\n        this._resetState();\n      }, () => {\n        const {\n          closingObserver\n        } = this._config;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        socket.close();\n        this._resetState();\n      });\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add(queue.subscribe(this.destination));\n      }\n    };\n    socket.onerror = e => {\n      this._resetState();\n      observer.error(e);\n    };\n    socket.onclose = e => {\n      if (socket === this._socket) {\n        this._resetState();\n      }\n      const {\n        closeObserver\n      } = this._config;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n    socket.onmessage = e => {\n      try {\n        const {\n          deserializer\n        } = this._config;\n        observer.next(deserializer(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this._socket) {\n      this._connectSocket();\n    }\n    this._output.subscribe(subscriber);\n    subscriber.add(() => {\n      const {\n        _socket\n      } = this;\n      if (this._output.observers.length === 0) {\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n          _socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n  unsubscribe() {\n    const {\n      _socket\n    } = this;\n    if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n      _socket.close();\n    }\n    this._resetState();\n    super.unsubscribe();\n  }\n}\n","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n  return new WebSocketSubject(urlConfigOrSource);\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {webSocket, WebSocketSubject} from 'rxjs/webSocket';\n\nexport interface MessageData {\n  message: string;\n  type: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebsocketService {\n  private socket$!: WebSocketSubject<any>;\n  websocketSubscription?: Subscription;\n  toastMessage = new Subject<MessageData>();\n\n  constructor() {\n    this.connect();\n  }\n\n  public connect(): Observable<MessageData> {\n    if (!this.socket$ || this.socket$.closed) {\n      const client_id = Math.floor(Math.random() * 1000000);\n      // this.socket$ = webSocket('ws://10.0.10.131:7889/ws/' + client_id);\n      // Determine the WebSocket protocol based on the current page protocol\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      // Use the current hostname\n      const hostname = window.location.hostname;\n      // Use the port if needed, or leave it empty for default ports (80 for ws and 443 for wss)\n      const port = window.location.port ? `:${window.location.port}` : ''; // Use the current port or specify one\n      // Construct the WebSocket URL dynamically\n      const wsUrl = `${wsProtocol}//${hostname}${port}/ws/${client_id}`;\n\n      this.socket$ = webSocket(wsUrl);\n\n      // Subscribe to the WebSocket and handle incoming messages\n      this.websocketSubscription = this.socket$.subscribe({\n        next: (data: MessageData) => {\n          this.toastMessage.next(data);\n        },\n        error: (error) => {\n          console.error('WebSocket error:', error);\n        },\n        complete: () => {\n          console.log('WebSocket connection closed');\n        },\n      });\n    }\n    return this.socket$.asObservable();\n  }\n\n  public showToast(message: string, type: string = 'Success'): void {\n    this.toastMessage.next({message, type});\n  }\n\n  close() {\n    if (this.websocketSubscription) {\n      this.websocketSubscription.unsubscribe();\n    }\n    this.socket$.complete();\n  }\n}\n"],"mappings":"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","names":[],"x_google_ignoreList":[0,1]}