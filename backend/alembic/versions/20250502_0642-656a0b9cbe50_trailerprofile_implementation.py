"""TrailerProfile Implementation

Revision ID: 656a0b9cbe50
Revises: 1c5ac69def9a
Create Date: 2025-05-02 06:42:44.954026

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from app_logger import ModuleLogger
from dotenv import load_dotenv
import os

APP_DATA_DIR = os.path.abspath(os.getenv("APP_DATA_DIR", "/config"))
ENV_PATH = f"{APP_DATA_DIR}/.env"

# Load environment variables, do not override system environment variables
load_dotenv(dotenv_path=ENV_PATH, override=False)

# revision identifiers, used by Alembic.
revision: str = "656a0b9cbe50"
down_revision: Union[str, None] = "1c5ac69def9a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

logger = ModuleLogger("AlembicMigrations")


def getenv_bool(key: str, default: bool) -> bool:
    return os.getenv(key.upper(), str(default)).lower() in ["true", "1"]


def getenv_int(key: str, default: int) -> int:
    return int(os.getenv(key.upper(), str(default)))


def getenv_str(key: str, default: str) -> str:
    return os.getenv(key.upper(), default)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("trailerprofile", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "always_search",
                sa.Boolean(),
                server_default=sa.false(),
                nullable=False,
            )
        )
        logger.info("Added 'always_search' column to 'trailerprofile' table")
    # ### end Alembic commands ###

    # ### Add initial TrailerProfile entries ###
    logger.info("Starting initial TrailerProfile creation")
    connection = op.get_bind()
    # session = Session(bind=connection)
    metadata = sa.MetaData()
    metadata.reflect(bind=connection)
    filter_table = metadata.tables.get("filter")
    customfilter_table = metadata.tables.get("customfilter")
    trailer_profile_table = metadata.tables.get("trailerprofile")
    if (
        filter_table is None
        or customfilter_table is None
        or trailer_profile_table is None
    ):
        logger.info(
            "One or more required tables do not exist! Please apply previous"
            " migrations."
        )
        raise Exception(
            "One or more required tables do not exist! Please apply previous"
            " migrations."
        )
    try:
        logger.info("Creating initial TrailerProfiles from .env file")
        # 1. Insert CustomFilters into the CustomFilter table
        customfilter_movies = {
            "filter_name": "Movie Trailers",
            "filter_type": "TRAILER",
        }
        customfilter_series = {
            "filter_name": "Series Trailers",
            "filter_type": "TRAILER",
        }
        cf_res1 = connection.execute(
            customfilter_table.insert().values(customfilter_movies)
        )
        cf_id1 = cf_res1.lastrowid
        cf_res2 = connection.execute(
            customfilter_table.insert().values(customfilter_series)
        )
        cf_id2 = cf_res2.lastrowid
        logger.info(f"Inserted CustomFilters with IDs: {cf_id1}, {cf_id2}")
        # 2. Insert Filters into the Filter table
        filter_trailer_exists1 = {
            "filter_by": "trailer_exists",
            "filter_condition": "EQUALS",
            "filter_value": "false",
            "customfilter_id": cf_id1,
        }
        filter_is_movie = {
            "filter_by": "is_movie",
            "filter_condition": "EQUALS",
            "filter_value": "true",
            "customfilter_id": cf_id1,
        }
        filter_trailer_exists2 = {
            "filter_by": "trailer_exists",
            "filter_condition": "EQUALS",
            "filter_value": "false",
            "customfilter_id": cf_id2,
        }
        filter_is_series = {
            "filter_by": "is_movie",
            "filter_condition": "EQUALS",
            "filter_value": "false",
            "customfilter_id": cf_id2,
        }
        op.bulk_insert(
            filter_table,
            [
                filter_trailer_exists1,
                filter_is_movie,
                filter_trailer_exists2,
                filter_is_series,
            ],
        )
        logger.info(
            "Inserted CustomFilters for initial TrailerProfiles successfully"
        )
        # 3. Create TrailerProfile entries with the CustomFilter and Filters
        profile1 = {
            "enabled": getenv_bool("MONITOR_ENABLED", True),
            "file_format": getenv_str("TRAILER_FILE_FORMAT", "mkv"),
            "file_name": getenv_str(
                "TRAILER_FILE_NAME", "{title} ({year})-trailer.{ext}"
            ),
            "folder_enabled": getenv_bool("TRAILER_FOLDER_MOVIE", False),
            "folder_name": "Trailers",
            "embed_metadata": getenv_bool("TRAILER_EMBED_METADATA", True),
            "remove_silence": getenv_bool("TRAILER_REMOVE_SILENCE", False),
            "audio_format": getenv_str("TRAILER_AUDIO_FORMAT", "opus"),
            "audio_volume_level": getenv_int(
                "TRAILER_AUDIO_VOLUME_LEVEL", 100
            ),
            "video_format": getenv_str("TRAILER_VIDEO_FORMAT", "vp9"),
            "video_resolution": getenv_int("TRAILER_RESOLUTION", 1080),
            "subtitles_enabled": getenv_bool(
                "TRAILER_SUBTITLES_ENABLED", False
            ),
            "subtitles_format": getenv_str("TRAILER_SUBTITLES_FORMAT", "srt"),
            "subtitles_language": getenv_str(
                "TRAILER_SUBTITLES_LANGUAGE", "en"
            ),
            "search_query": getenv_str(
                "TRAILER_SEARCH_QUERY", "{title} {year} {is_movie} trailer"
            ),
            "min_duration": getenv_int("TRAILER_MIN_DURATION", 30),
            "max_duration": getenv_int("TRAILER_MAX_DURATION", 600),
            "always_search": getenv_bool("TRAILER_ALWAYS_SEARCH", False),
            "exclude_words": getenv_str("EXCLUDE_WORDS", ""),
            "include_words": "",
            "customfilter_id": cf_id1,
        }
        profile2 = profile1.copy()
        profile2["customfilter_id"] = cf_id2
        profile2["folder_enabled"] = getenv_bool("TRAILER_FOLDER_SERIES", True)
        op.bulk_insert(trailer_profile_table, [profile1, profile2])

        logger.info("Initial TrailerProfiles created successfully")
    except Exception as e:
        logger.error(f"Failed to create initial TrailerProfiles: {e}")
        raise
    # ### End initial TrailerProfile creation ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("trailerprofile", schema=None) as batch_op:
        batch_op.drop_column("always_search")
    # ### end Alembic commands ###

    # No need to delete specific TrailerProfiles as downgrade typically removes schema changes
